1.#include <stdio.h>
#include <stdlib.h>

// Function to compare two prices for quicksort
int compare(const void* a, const void* b) {
    return (*(float*)a > *(float*)b) - (*(float*)a < *(float*)b);
}

// Function to sort the product prices using quicksort
void sort_prices(float* prices, int size) {
    qsort(prices, size, sizeof(float), compare);
}

int main() {
    int n;

    // Get the number of products from the user
    printf("Enter the number of products: ");
    scanf("%d", &n);

    // Dynamically allocate memory for the prices
    float* prices = (float*)malloc(n * sizeof(float));
    if (prices == NULL) {
        printf("Memory allocation failed\n");
        return -1;
    }

    // Input prices from the user
    printf("Enter the prices of the products:\n");
    for (int i = 0; i < n; i++) {
        printf("Price %d: ", i + 1);
        scanf("%f", &prices[i]);
    }

    // Sort the prices in ascending order
    sort_prices(prices, n);

    // Output the sorted prices
    printf("Sorted product prices (ascending):\n");
    for (int i = 0; i < n; i++) {
        printf("%.2f ", prices[i]);
    }
    printf("\n");

    // Free dynamically allocated memory
    free(prices);

    return 0;
}
OUTPUT
Enter the number of products: 5
Enter the prices of the products:
Price 1: 20.5
Price 2: 5.99
Price 3: 13.45
Price 4: 7.89
Price 5: 18.30
Sorted product prices (ascending):
5.99 7.89 13.45 18.30 20.50


2.#include <stdio.h>
#include <stdlib.h>

// Function to compare two ages for quicksort
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

// Function to sort the ages using quicksort
void sort_ages(int* ages, int size) {
    qsort(ages, size, sizeof(int), compare);
}

int main() {
    int n;

    // Get the number of participants from the user
    printf("Enter the number of participants: ");
    scanf("%d", &n);

    // Dynamically allocate memory for the ages
    int* ages = (int*)malloc(n * sizeof(int));
    if (ages == NULL) {
        printf("Memory allocation failed\n");
        return -1;
    }

    // Input ages from the user
    printf("Enter the ages of the participants:\n");
    for (int i = 0; i < n; i++) {
        printf("Age %d: ", i + 1);
        scanf("%d", &ages[i]);
    }

    // Sort the ages in ascending order
    sort_ages(ages, n);

    // Output the sorted ages
    printf("Sorted ages (youngest to oldest):\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", ages[i]);
    }
    printf("\n");

    // Free dynamically allocated memory
    free(ages);

    return 0;
}
OUTPUT
Enter the number of participants: 4
Enter the ages of the participants:
Age 1: 45
Age 2: 33
Age 3: 28
Age 4: 60
Sorted ages (youngest to oldest):
28 33 45 60

3.#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to compare two book titles for alphabetical order
int compare(const void* a, const void* b) {
    return strcmp(*(const char**)a, *(const char**)b);
}

// Function to sort the book titles alphabetically using quicksort
void sort_books(char** books, int size) {
    qsort(books, size, sizeof(char*), compare);
}

int main() {
    int n;

    // Get the number of books from the user
    printf("Enter the number of books: ");
    scanf("%d", &n);

    // Dynamically allocate memory for the book titles
    char** books = (char**)malloc(n * sizeof(char*));
    if (books == NULL) {
        printf("Memory allocation failed\n");
        return -1;
    }

    // Input book titles from the user
    printf("Enter the titles of the books:\n");
    getchar(); // To consume the newline character from previous input
    for (int i = 0; i < n; i++) {
        books[i] = (char*)malloc(100 * sizeof(char)); // Allocate space for each title
        printf("Book %d: ", i + 1);
        fgets(books[i], 100, stdin);
        books[i][strcspn(books[i], "\n")] = '\0'; // Remove the newline character
    }

    // Sort the book titles alphabetically
    sort_books(books, n);

    // Output the sorted book titles
    printf("Sorted book titles (alphabetically):\n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", books[i]);
    }

    // Free dynamically allocated memory
    for (int i = 0; i < n; i++) {
        free(books[i]);
    }
    free(books);

    return 0;
}
OUTPUT
Enter the number of books: 3
Enter the titles of the books:
Book 1: The Catcher in the Rye
Book 2: To Kill a Mockingbird
Book 3: 1984
Sorted book titles (alphabetically):
1984
The Catcher in the Rye
To Kill a Mockingbird
