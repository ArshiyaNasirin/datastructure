#include <stdio.h>
#include <string.h>

#define MAX_CONTACTS 100

typedef struct {
    char name[50];
    char phone_number[15];
} Contact;

Contact contacts[MAX_CONTACTS];
int contact_count = 0;

void add_contact() {
    if (contact_count < MAX_CONTACTS) {
        printf("Enter name: ");
        scanf(" %[^\n]", contacts[contact_count].name);
        printf("Enter phone number: ");
        scanf(" %[^\n]", contacts[contact_count].phone_number);
        contact_count++;
    } else {
        printf("Contact list is full!\n");
    }
}

void delete_contact(char name[]) {
    int i, found = 0;
    for (i = 0; i < contact_count; i++) {
        if (strcmp(contacts[i].name, name) == 0) {
            found = 1;
            for (int j = i; j < contact_count - 1; j++) {
                contacts[j] = contacts[j + 1];
            }
            contact_count--;
            break;
        }
    }
    if (!found) {
        printf("Contact not found!\n");
    }
}

void display_contacts() {
    if (contact_count == 0) {
        printf("No contacts in the list.\n");
    } else {
        for (int i = 0; i < contact_count; i++) {
            printf("Name: %s, Phone: %s\n", contacts[i].name, contacts[i].phone_number);
        }
    }
}

int main() {
    add_contact();
    add_contact();
    display_contacts();
    delete_contact("John");
    display_contacts();
    return 0;
}

2.#include <stdio.h>
#include <string.h>

#define MAX_ITEMS 100

char shopping_list[MAX_ITEMS][50];
int item_count = 0;

void add_item() {
    if (item_count < MAX_ITEMS) {
        printf("Enter item name: ");
        scanf(" %[^\n]", shopping_list[item_count]);
        item_count++;
    } else {
        printf("Shopping list is full!\n");
    }
}

void remove_item(char item[]) {
    int i, found = 0;
    for (i = 0; i < item_count; i++) {
        if (strcmp(shopping_list[i], item) == 0) {
            found = 1;
            for (int j = i; j < item_count - 1; j++) {
                strcpy(shopping_list[j], shopping_list[j + 1]);
            }
            item_count--;
            break;
        }
    }
    if (!found) {
        printf("Item not found!\n");
    }
}

void display_items() {
    if (item_count == 0) {
        printf("No items in the shopping list.\n");
    } else {
        for (int i = 0; i < item_count; i++) {
            printf("%s\n", shopping_list[i]);
        }
    }
}

int main() {
    add_item();
    add_item();
    display_items();
    remove_item("Milk");
    display_items();
    return 0;
}

3.#include <stdio.h>

#define MAX_GRADES 100

float grades[MAX_GRADES];
int grade_count = 0;

void add_grade(float grade) {
    if (grade_count < MAX_GRADES) {
        grades[grade_count] = grade;
        grade_count++;
    } else {
        printf("Grade list is full!\n");
    }
}

float calculate_average() {
    if (grade_count == 0) {
        return 0.0;
    }
    float sum = 0;
    for (int i = 0; i < grade_count; i++) {
        sum += grades[i];
    }
    return sum / grade_count;
}

void display_grades() {
    if (grade_count == 0) {
        printf("No grades available.\n");
    } else {
        for (int i = 0; i < grade_count; i++) {
            printf("Grade: %.2f\n", grades[i]);
        }
    }
}

int main() {
    add_grade(85.5);
    add_grade(90.0);
    add_grade(78.3);
    display_grades();
    printf("Average grade: %.2f\n", calculate_average());
    return 0;
}

4.#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Task {
    char description[100];
    struct Task* next;
} Task;

Task* head = NULL;

void add_task_at_beginning(char description[]) {
    Task* new_task = (Task*)malloc(sizeof(Task));
    strcpy(new_task->description, description);
    new_task->next = head;
    head = new_task;
}

void remove_task_from_end() {
    if (head == NULL) {
        printf("No tasks to remove.\n");
        return;
    }
    if (head->next == NULL) {
        free(head);
        head = NULL;
        return;
    }
    Task* temp = head;
    while (temp->next && temp->next->next) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
}

void display_tasks() {
    if (head == NULL) {
        printf("No tasks in the list.\n");
        return;
    }
    Task* temp = head;
    while (temp != NULL) {
        printf("Task: %s\n", temp->description);
        temp = temp->next;
    }
}

int main() {
    add_task_at_beginning("Complete homework");
    add_task_at_beginning("Buy groceries");
    display_tasks();
    remove_task_from_end();
    display_tasks();
    return 0;
}

5.#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Song {
    char title[100];
    char artist[50];
    struct Song* next;
} Song;

Song* head = NULL;

void add_song(char title[], char artist[]) {
    Song* new_song = (Song*)malloc(sizeof(Song));
    strcpy(new_song->title, title);
    strcpy(new_song->artist, artist);
    new_song->next = head;
    head = new_song;
}

void remove_song(char title[]) {
    if (head == NULL) {
        printf("Playlist is empty.\n");
        return;
    }
    if (strcmp(head->title, title) == 0) {
        Song* temp = head;
        head = head->next;
        free(temp);
        return;
    }
    Song* temp = head;
    while (temp->next && strcmp(temp->next->title, title) != 0) {
        temp = temp->next;
    }
    if (temp->next) {
        Song* to_delete = temp->next;
        temp->next = temp->next->next;
        free(to_delete);
    } else {
        printf("Song not found.\n");
    }
}

void display_playlist() {
    if (head == NULL) {
        printf("No songs in the playlist.\n");
        return;
    }
    Song* temp = head;
    while (temp != NULL) {
        printf("Song: %s by %s\n", temp->title, temp->artist);
        temp = temp->next;
    }
}

int main() {
    add_song("Song 1", "Artist 1");
    add_song("Song 2", "Artist 2");
    display_playlist();
    remove_song("Song 1");
    display_playlist();
    return 0;
}
